import java.text.SimpleDateFormat

var Number counter = 1
var Timer timer = null



rule "Update Temperature Min- and Max values"
    when
        Item  Temperature_Garden received update
    then
        var Number Min
        var Number Max
        var String tmp
        var SimpleDateFormat df = new SimpleDateFormat( "HH:mm" ) 

        if (Temperature_Garden.state instanceof DecimalType) {
            Min = (Temperature_Garden.minimumSince(now.toDateMidnight, "rrd4j").state as DecimalType)
            tmp = (Math::round(Min.floatValue*10.0)/10.0) + " °C (" + df.format(Temperature_Garden.minimumSince(now.toDateMidnight, "rrd4j").timestamp) + " )"
            postUpdate(Temperature_Garden_Min_Formatted, tmp)

            Max = Temperature_Garden.maximumSince(now.toDateMidnight, "rrd4j").state as DecimalType
            df = new SimpleDateFormat( "HH:mm" ) 
            tmp = (Math::round(Max.floatValue*10.0)/10.0) + " °C (" + df.format(Temperature_Garden.maximumSince(now.toDateMidnight, "rrd4j").timestamp) + ")"
            postUpdate(Temperature_Garden_Max_Formatted, tmp)
        }
    end




rule "Resource"
when Item Resource_detect changed
then
var String json = (Resource_detect.state as StringType).toString
var String type = transform("JSONPATH","$.type",json).toString
var String state = transform("JSONPATH","$.state",json).toString
sendCommand(Resource_detect,type)
end 

rule "sprinkqwe"
when Item smoke changed from OFF to ON
then
sendCommand(sprink, ON)
sendCommand(Alarm,ON)
sendCommand(server,OFF)
end

rule "sprink"
when Item smoke changed from ON to OFF
then 
sendCommand(sprink, OFF)
sendCommand(Alarm, OFF)
sendCommand(server,ON)
end


